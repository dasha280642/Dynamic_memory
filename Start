#include <iostream>
using namespace std;
#define tab "\t"

void FillRand(int arr[], const int n);
void Print(int arr[], const int n);
int* push_back(int* arr, int& n, int value);
int* push_front(int* arr, int& n, int value);

int* insert(int* arr, int& n, int value, int index);

void main()
{
	setlocale(LC_ALL, "");
	int n;
	cout << "Введите количество элементов: "; cin >> n;

	int* arr = new int[n];

	FillRand(arr, n);
	Print(arr, n);

	int value;
	cout << "Введите добавляемое значение: "; cin >> value;
	arr = push_back(arr, n, value);
	Print(arr, n);
	
	cout << "Введите добавляемое значение: "; cin >> value;
	arr = push_front(arr, n, value);
	Print(arr, n);
	
	int index; cout << "Введите индекс добавляемого элемента"; cin >> index;
	arr = insert(arr, n, value, index);
	Print(arr, n);

	delete[] arr;
}

int* push_back(int* arr, int& n, int value)
{
	
	//Создаем новый мссив нужного размера
	int* buffer = new int[n + 1];

	//Копируем все содержимое исходного массива в буферный
	for (int i = 0; i < n; i++)
	{
		buffer[i] = arr[i];
	}
	//Удаляем исходный массив:
	delete[] arr;
	//Подменяем адрес в указателе 'arr' адресом нового массива:
	arr = buffer;
	//Только после всех действий в конец мссива 'arr' можно добавить значение
	arr[n] = value;
	//После добавления в массив 'arr' элемента количество его элементов увеличивается на 1
	n++;
	//Mission copmplete - элемент добавлен
	return arr;
}

int* push_front(int* arr, int& n, int value)
{
	int* buffer = new int[n + 1];
	for (int i = 0; i < n; i++)
	{
		buffer[i + 1] = arr[i];
	}
	delete[] arr;
	arr = buffer;
	arr[0] = value;
	n++;
	return arr;

}



	void FillRand(int arr[], const int n)
	{
		for (int i = 0; i < n; i++)
		{
			*(arr + i) = rand() % 100;
		}
	}

	void Print(int arr[], const int n)
	{
		for (int i = 0; i < n; i++)
		{
			cout << arr[i] << tab;
		}
	cout << endl;
}

	int* insert(int* arr, int& n, int value, int index)
	{
		int* buffer = new int[n + 1];
		for (int i = 0; i < index; i++)
		{
			buffer[i] = arr[i];
		}

		for (int i = 0; i < n; i++)
		{
			buffer[i + 1] = arr[i];
		}

		buffer[index] = value;
		delete[] arr;
		arr = buffer;
		n++;
		return arr;
	}
